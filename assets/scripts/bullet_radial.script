local LIVE_TIME = 5.0
local SPEED = 6.0
local DISABLE_RADIAL_MOVEMENT_DISTANCE = 120.0
local RADIAL_FACTOR = 200.0  -- кривизна полета. чем больше фактор - тем кривее траектория

go.property("is_reflected", false)

local function on_destroy_animation_end() 
    go.delete()
end

local function on_destroy(self)
    self.is_active = false
    sprite.play_flipbook("#sprite", "explode", on_destroy_animation_end)
end

local function calculate_left_radius_point_dir(rp)
    return vmath.vector3(-rp.y, rp.x, rp.z)
end

local function calculate_right_radius_point_dir(rp)
    return vmath.vector3(rp.y, -rp.x, rp.z)
end

local function calculate_radius_point(self, target)
    --
    --      . B
    --     /_______________________. <- radius_point (in case of right radius point dir)
    --    /      <- radius ->
    --  A.
    --
    local pos = go.get_position()
    local dir = target - pos

    local len = vmath.length(dir)
    if len < DISABLE_RADIAL_MOVEMENT_DISTANCE then
        return target
    end

    dir.z = 0
    local radius_point_dir = (self.is_left_radial) and calculate_left_radius_point_dir(dir) or calculate_right_radius_point_dir(dir)
    radius_point_dir = vmath.normalize(radius_point_dir) * self.radial_factor

    local radius_apply_point = pos + (dir / 2)
    local radius_point = radius_apply_point + radius_point_dir
    return radius_point
end

function init(self)
    self.direction = vmath.vector3(0, 0, 0)
    self.target_id = nil
    self.speed_mul = 1.0
    self.live_time = LIVE_TIME
    self.is_active = false

    self.radial_factor = RADIAL_FACTOR
    self.is_left_radial = (math.random(-1, 1) <= 0) and true or false -- equal to ternary operator `cond? x : y`

    -- debug
    -- self.target_id = "/hero/heroobj"
    -- self.is_active = true
    -- debug
end

function final(self)
end

function update(self, dt)
    if (not self.is_active) then
        return
    end

    self.live_time = self.live_time - dt
    if self.live_time <= 0.0 then
        on_destroy(self)
    end
end

function fixed_update(self, dt)
    if (not self.is_active) then
        return
    end

    if not self.is_reflected and self.target_id ~= nil then
        local target = go.get_position(self.target_id)
        self.direction = calculate_radius_point(self, target) - go.get_position()
    end

    local norma = vmath.normalize(self.direction)
    local pos = go.get_position()

    pos.x = pos.x + norma.x * SPEED * self.speed_mul
    pos.y = pos.y + norma.y * SPEED * self.speed_mul

    go.set_position(pos)
    local angle = math.atan2(self.direction.x, -self.direction.y)
    go.set_rotation(vmath.quat_rotation_z(angle))
end

function on_message(self, message_id, message, sender)
    if message_id == hash("set_direction") then
        self.direction = message.direction
        self.is_reflected = message.is_reflected
        self.time_to_destroy = LIVE_TIME
        self.target = nil
    elseif message_id == hash("set_speed_mul") then
        self.speed_mul = message.speed_mul
    elseif message_id == hash("destroy") then
        on_destroy(self)
    elseif message_id == hash("is_reflected") then
        msg.post(message.other_id, "is_reflected", { is_reflected = self.is_reflected, other_id = msg.url() })
    elseif message_id == hash("set_radial") then
        print("Set radial")
        print(message.target_id)
        self.target_id = message.target_id
        self.radial_factor = message.radial_factor
        self.is_active = true
    end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Learn more: https://defold.com/manuals/hot-reload/
    -- Remove this function if not needed
end
